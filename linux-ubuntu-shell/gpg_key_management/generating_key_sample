This is the prompts when generatting a new GPG key with "--full-generate-key"
-----------------------------------------------------------
$ gpg --full-generate-key

Please select what kind of key you want:
   (1) RSA and RSA
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   (9) ECC (sign and encrypt) *default*
  (10) ECC (sign only)
  (14) Existing key from card
Your selection? 1

-----------------------------------------------------------
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072)
Requested keysize is 3072 bits

-----------------------------------------------------------
# One weeek expiration example
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 1w
Key expires at Mon  1 Aug 10:45:39 2022 BST
Is this correct? (y/N) y

-----------------------------------------------------------
GnuPG needs to construct a user ID to identify your key.

Real name: my-gpg-test-key
Email address: sample-email@example.com
Comment: I am using this gpg key to test git-secret cmds
You selected this USER-ID:
    "my-gpg-test-key (I am using this gpg key to test git-secret cmds) <sample-email@example.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: revocation certificate stored as '/Users/$USER/.gnupg/openpgp-revocs.d/XXXsssXXXXfffYYYYYYnnnZZZZ000000000.rev'
public and secret key created and signed.

pub   rsa3072 2022-07-25 [SC] [expires: 2022-08-01]
      XXXsssXXXXfffYYYYYYnnnZZZZ000000000
uid                      my-gpg-test-key (I am using this gpg key to test git-secret cmds) <sample-email@example.com>
sub   rsa3072 2022-07-25 [E] [expires: 2022-08-01]

-----------------------------------------------------------
# Checking the new GPG key
$ gpg --list-secret-keys

pub   rsa3072 2022-07-25 [SC] [expires: 2022-08-01]
      XXXsssXXXXfffYYYYYYnnnZZZZ000000000
uid           [ultimate] my-gpg-test-key (I am using this gpg key to test git-secret cmds) <sample-email@example.com>
sub   rsa3072 2022-07-25 [E] [expires: 2022-08-01]
-----------------------------------------------------------
$ gpg --list-keys

pub   rsa3072 2022-07-25 [SC] [expires: 2022-08-01]
      XXXsssXXXXfffYYYYYYnnnZZZZ000000000
uid           [ultimate] my-gpg-test-key (I am using this gpg key to test git-secret cmds) <sample-email@example.com>
sub   rsa3072 2022-07-25 [E] [expires: 2022-08-01]


############ ############ ############
######### Deleting the new GPG key  ############
gpg --delete-secret-key my-gpg-test-key
gpg --delete-key my-gpg-test-key
