server {
    listen 80;
    server_name example.com;
    # force HTTPS
    rewrite ^ https://www.example.com$request_uri? permanent;
    access_log /var/log/nginx/example.com_80.access.log;
    error_log /var/log/nginx/example.com_80.error.log error;
}
server {
    listen 443 ssl http2;
    server_name www.example.com;

    #Â include /etc/nginx/http-auth.conf;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    
    ssl_prefer_server_ciphers off;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_session_tickets off;
    ssl_session_timeout 24h;
    ssl_buffer_size 1400;

    # https://ssl-config.mozilla.org/
    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/ssl/certs/dhparam.pem;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security max-age=63072000 always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_certificate /etc/ssl/certs/www.example.com.sha256.crt-ocsp.chain.crt;
    ssl_certificate_key /etc/ssl/private/www.example.com.key;
    ssl_trusted_certificate /etc/ssl/certs/www.example.com.sha256.crt-ocsp.chain.crt;

    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;

    # X-Frame-Options is to prevent from clickJacking attack
    add_header X-Frame-Options SAMEORIGIN;

    # disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter
    add_header X-XSS-Protection "1; mode=block";

    access_log /var/log/nginx/www.example.com.ssl.access.log;
    error_log /var/log/nginx/www.example.com.ssl.error.log error;

    client_max_body_size 6000M;
    
    # using rewrite directive 'redirect' with 302/307 - temp redirects (1/2)
    rewrite (?i)^/source-page/redirect-to/from-here$ /destination-page/redirected-to-here redirect;
    
    # with a remote location url or destination with 'query string' (2/2)
    rewrite (?i)^/source-page/redirect-to/from-here-page2$ 	"https://www.example.com/index.aspx?page-id=2=&test_page%5B2%5D=2&clearing-pages=All&page_title=0" redirect;    
    
    # using rewrite directive 'permanent' with 301 - permanent redirects (1/2)
    rewrite (?i)^/source-page/redirect-to/from-here-page3$ /destination-page/redirected-to-here-page3 permanent;
    
    # with a remote location url or destination with 'query string' (2/2)
    rewrite (?i)^/source-page/redirect-to/from-here-page4$ 	"https://www.example.com/index.aspx?page-id=4=&test_page%5B2%5D=2&clearing-pages=All&page_title=0" permanent;

    # for alias (good for ssl-key validation)
    # curl -I -H 'Cache-Control: no-cache' www.example.com/.well-known/pki-validation/ABCDEFG.txt
    location = /.well-known/pki-validation/ABCDEFG.txt { alias /tmp/ABCDEFG.txt; }
    
    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }
 
    # Protect files and directories from prying eyes (deny all access to these files).
    location ~* \.(test1|sample1|admin|module|profile|po|sh|.*log|.*sql|.*psql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|composer\.(lock|json)$|web\.config$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        deny all;
        return 404; # not found
    }

    # nginx condition for query string 
    location ~ /index.aspx(.*) {
    
        # curl -i https://www.example.com/index.aspx?page-id=111 and whatever after '111' e.g 111222, 111hdsahc, 111000
          # redirect 301 to '/default-page'
        if ( $args ~ page-id=111(.*) ) {
            return 301 $scheme://$host/default-page;
        }
        
        # curl -i https://www.example.com/index.aspx?page-id=abc and whatever after 'abc' e.g abc222, abc-hdsahc, abc_000
          # redirect 301 to '/'
        if ( $args ~ page-id=abc(.*) ) {
            return 301 $scheme://$host;
        }
        
        # else try to proccess the query string e.g curl -i https://www.example.com/index.aspx?page-id=page-id?01
        try_files $uri /index.php?$query_string;
    }

    # proxy app running on port: 8080
    location / {
        proxy_pass http://127.0.0.1:8080/;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_cache cache;
        proxy_cache_bypass $cookie_auth_tkt;
        proxy_no_cache $cookie_auth_tkt;
        proxy_cache_valid 30m;
        proxy_cache_key $host$scheme$proxy_host$request_uri;
        # In emergency comment out line to force caching
        # proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
    }

}
